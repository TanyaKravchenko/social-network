{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","api/api.ts","redux/profile-reducer.ts","images/avatar3.jpg","images/avatar5.jpg","images/avatar4.jpeg","images/avatar1.png","images/avatar2.jpg","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","images/news.jpg","components/News/News.tsx","images/music.png","components/Music/Music.tsx","images/settings.png","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControl.tsx","utils/validators/validators.ts","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","images/preloader.gif","components/common/Preloader/Preloader.tsx","redux/users-selectors.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Friends/Friend/Friend.tsx","components/Friends/Friends.tsx","components/Friends/FriendsContainer.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControl.module.css","components/Users/Users.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Friends/Friends.module.css","components/Friends/Friend/Friend.module.css","components/Dialogs/Message/Message.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","headers","baseURL","usersAPI","currentPage","pageSize","get","response","data","profileAPI","userId","status","put","authAPI","email","password","rememberMe","post","delete","ADD_POST","SET_USER_PROFILE","SET_STATUS","initialState","posts","id","v1","message","likes","newPostText","profile","setStatus","type","profileReducer","state","action","newPost","ADD_NEW_MESSAGE_TEXT","dialogs","name","avatar","src1","src2","src3","src4","src5","messages","dialogsReducer","newMessage","nameMessageBody","ADD_FRIENDS","friendsBlock","friendName","sidebarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","totalCount","toggleIsFetching","IsFetching","toggleFollowingProgress","usersReducer","map","u","followed","filter","SET_USER_DATA","login","isAuth","setAuthUserData","payload","getAuthUserData","dispatch","resultCode","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","classes","nav","item","to","activeClassName","active","News","src","news_image","alt","Music","music_image","Settings","settings_image","DialogItem","props","path","dialogItem","dialogAvatar","dialogName","Message","itemText","FormControl","meta","touched","error","children","showError","styles","formControl","Textarea","input","restProps","Input","required","value","maxLengthCreator","maxLength","length","maxLength50","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","values","addNewMessage","mapStateToPropsForRedirect","compose","connect","addNewMessageActionCreator","Component","Users","pagesCount","Math","ceil","pages","i","push","usersItemContainer","page","index","selectedPage","onClick","e","onPageChanged","usersItem","photos","small","large","photoItem","disabled","some","unfollow","follow","Preloader","preloader","getUsers","createSelector","getPageSize","getTotalUserCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","this","React","items","ProfileStatusWithHooks","useState","editMode","setEditMode","onDoubleClick","autoFocus","onBlur","updateUserStatus","onChange","currentTarget","ProfileInfo","descriptionBlock","ProfilePhotos","fullName","aboutMe","contacts","github","Post","post_avatar","maxLength10","MyPostsFormRedux","MyPosts","postsElement","postBlock","addPost","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","authorizedUserId","history","getUserProfile","getUserStatus","withRouter","Header","header","logout","HeaderContainer","LoginReduxForm","formSummaryError","stopSubmit","_error","formControlWrapper","formData","Friend","itemFriend","friendAvatar","nameClass","style","textDecoration","color","Friends","f","headerFriends","titleFriends","itemFriends","FriendsContainer","App","initializeApp","render","DialogsContainer","promise","Promise","all","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c500a890.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"News_item__g-_6y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Music_item__3oVaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Settings_item__3vgb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2fnbk\",\"item\":\"Navbar_item__3TpPD\",\"active\":\"Navbar_active__ugoIQ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\nconst baseURL = 'https://social-network.samuraijs.com/api/1.0/';\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '22d983b1-894f-49cd-9ef9-5c17b8e4c8a6'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n// type loginPostType = {\r\n//     resultCode: 0 | 1 | 100\r\n//     messages: Array<string>\r\n//         data: {\r\n//         userId: 2\r\n//     }\r\n// }\r\n//\r\n// type StopSubmitType = {\r\n//     stopSubmit: (form: string, errors?: any) => void\r\n// }\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(baseURL + `users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response) => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(id: string) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    unfollow(id: string) {\r\n        return instance.delete(`unfollow/${id}`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status: status})\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n","import {v1} from 'uuid'\r\nimport {Dispatch} from 'redux';\r\nimport {profileAPI} from '../api/api';\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\ntype PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\ntype ContactType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: string\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof addPostActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: v1(), message: 'HiHello', likes: 5},\r\n        {id: v1(), message: 'YoHello', likes: 15}\r\n    ],\r\n    newPostText: '',\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                message: action.newPostText,\r\n                likes: 0\r\n            }\r\n            // if (action.newPostText.trim() !== '') {\r\n            // } else {\r\n            //     alert('Error. Нужно доделать')\r\n            // }\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [...state.posts, newPost]\r\n            };\r\n                case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType | null) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }as const\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    profileAPI.getProfile(userId)\r\n        .then((response) => {\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n}\r\n\r\nexport const getUserStatus = (userId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    profileAPI.getStatus(userId)\r\n        .then((response) => {\r\n            dispatch(setStatus(response.data))\r\n        })\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => (dispatch: Dispatch<ActionType>) => {\r\n    profileAPI.updateStatus(status)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0)\r\n            dispatch(setStatus(status))\r\n        })\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n","export default __webpack_public_path__ + \"static/media/avatar3.98fcfaf1.jpg\";","export default __webpack_public_path__ + \"static/media/avatar5.4f1f971b.jpg\";","export default __webpack_public_path__ + \"static/media/avatar4.b85489ca.jpeg\";","export default __webpack_public_path__ + \"static/media/avatar1.1b29529b.png\";","export default __webpack_public_path__ + \"static/media/avatar2.273adcab.jpg\";","import {v1} from 'uuid';\r\nimport src1 from '../images/avatar3.jpg';\r\nimport src2 from '../images/avatar5.jpg';\r\nimport src3 from '../images/avatar4.jpeg';\r\nimport src4 from '../images/avatar1.png';\r\nimport src5 from '../images/avatar2.jpg';\r\n\r\nexport const ADD_NEW_MESSAGE_TEXT = 'ADD-NEW-MESSAGE-TEXT'\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof addNewMessageActionCreator>\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Dimych', avatar: src1},\r\n        {id: v1(), name: 'Sveta', avatar: src2},\r\n        {id: v1(), name: 'Valera', avatar: src3},\r\n        {id: v1(), name: 'Ignat', avatar: src4},\r\n        {id: v1(), name: 'Victor', avatar: src5},\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: 'Hi'},\r\n        {id: v1(), message: 'Yo'},\r\n        {id: v1(), message: 'Hello!'},\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_MESSAGE_TEXT:\r\n            let newMessage: MessageType = {\r\n                id: v1(),\r\n                message: action.nameMessageBody,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addNewMessageActionCreator = (nameMessageBody: string) => {\r\n    return {\r\n        type: ADD_NEW_MESSAGE_TEXT,\r\n        nameMessageBody\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import {v1} from 'uuid';\r\nimport src1 from '../images/avatar3.jpg';\r\nimport src2 from '../images/avatar5.jpg';\r\nimport src3 from '../images/avatar4.jpeg';\r\n\r\nexport type FriendsBlockType = {\r\n    id: string\r\n    friendName: string\r\n    avatar: string\r\n}\r\n\r\nconst ADD_FRIENDS = 'ADD_FRIENDS'\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ActionType = ReturnType<typeof addFriends>\r\n\r\nlet initialState = {\r\n    friendsBlock: [\r\n        {id: v1(), friendName: 'Kostya', avatar: src1},\r\n        {id: v1(), friendName: 'Masha', avatar: src2},\r\n        {id: v1(), friendName: 'Misha', avatar: src3}\r\n    ]\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_FRIENDS:\r\n            return {\r\n                ...state,\r\n                friendsBlock: action.friendsBlock\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addFriends = (friendsBlock: Array<FriendsBlockType>) => ({\r\n    type: ADD_FRIENDS,\r\n    friendsBlock\r\n} as const)\r\n\r\nexport default sidebarReducer;\r\n\r\n","import {usersAPI} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\ntype PhotoType = {\r\n    small: any\r\n    large: any\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    photos: PhotoType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<string>\r\n}\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setUsersTotalCount> |\r\n    ReturnType<typeof toggleIsFetching> |\r\n    ReturnType<typeof toggleFollowingProgress>\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n            case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.IsFetching\r\n            };\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.IsFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: string) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: string) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setUsersTotalCount = (totalCount: number) => ({type: SET_USERS_TOTAL_COUNT, totalCount} as const)\r\nexport const toggleIsFetching = (IsFetching: boolean) => ({type: TOGGLE_IS_FETCHING, IsFetching} as const)\r\nexport const toggleFollowingProgress = (IsFetching: boolean, userId: string) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, IsFetching, userId} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then((data) => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setUsersTotalCount(data.totalCount))\r\n            });\r\n    }\r\n}\r\n\r\nexport const follow = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.follow(userId)\r\n            .then((response) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId)\r\n            .then((response) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            })\r\n    }\r\n}\r\nexport default usersReducer;\r\n\r\n","import {authAPI} from '../api/api';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AppStateType} from './redux-store';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\n\r\nexport const SET_USER_DATA = 'SET_USER_DATA'\r\n\r\n// type DataType = {\r\n//     userId: string | null\r\n//     email: string | null\r\n//     login: string | null\r\n//     isAuth: boolean\r\n// }\r\n\r\nexport type ActionType = ReturnType<typeof setAuthUserData> | FormAction\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setAuthUserData = (id: string | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => (dispatch: DispatchType) => {\r\n    return authAPI.me()\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n        })\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => (dispatch: DispatchType) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData());\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\r\n                dispatch(stopSubmit('login', {_error: message}));\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = (): ThunkType => (dispatch: DispatchType) => {\r\n    authAPI.logout()\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;","import {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AppStateType} from './redux-store';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\n\r\nexport const INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nexport type ActionType = ReturnType<typeof initializedSuccess> | FormAction\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch: DispatchType) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './app-reducer';\r\n\r\nexport type RootStateType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootStateType>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.active}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","export default __webpack_public_path__ + \"static/media/news.6d9ef3aa.jpg\";","import React from 'react';\r\nimport classes from './News.module.css'\r\nimport news_image from '../../images/news.jpg';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={news_image} alt={'news_image'}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","export default __webpack_public_path__ + \"static/media/music.0e999249.png\";","import React from 'react';\r\nimport classes from './Music.module.css'\r\nimport music_image from '../../images/music.png';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={music_image} alt={'music_image'}/>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","export default __webpack_public_path__ + \"static/media/settings.f6a8201c.png\";","import React from 'react';\r\nimport classes from './Settings.module.css'\r\nimport settings_image from '../../images/settings.png';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div>\r\n                Settings\r\n            </div>\r\n            <img src={settings_image} alt={'settings_image'}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport classes from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string\r\n    avatar: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={classes.dialogItem}>\r\n            <div className={classes.dialogAvatar}>\r\n                <NavLink to={path}><img src={props.avatar} alt={'avatar'}/></NavLink>\r\n            </div>\r\n            <div className={classes.dialogName}>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './Message.module.css'\r\n\r\ntype MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={classes.itemText}>\r\n            <div className={classes.message}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControl.module.css'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const showError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (showError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {showError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}> <textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value: FieldValidatorType) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControl';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\nexport type AddMessageFormType = {\r\n    nameMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'nameMessageBody'}\r\n                    placeholder={'Enter your message'}\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {InitialStateType} from '../../redux/dialogs-reducer';\r\nimport {AddMessageFormRedux, AddMessageFormType} from './AddMessageForm/AddMessageForm';\r\n\r\ntype DialogsType = {\r\n    onMessageChange: (textMessage: string) => void\r\n    addNewMessage: (nameMessageBody: string) => void\r\n    dialogsPage: InitialStateType;\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsType> = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => (\r\n        <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>\r\n    ));\r\n    let messagesElements = props.dialogsPage.messages.map((m) => (\r\n        <Message key={m.id} id={m.id} message={m.message}/>\r\n    ));\r\n\r\n    let addNewMessage = (values: AddMessageFormType) => {\r\n        props.addNewMessage(values.nameMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n            <div className={classes.messages}>{messagesElements}</div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth)\r\n            return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import {\r\n    ActionType,\r\n    addNewMessageActionCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport React from 'react';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n    return {\r\n        addNewMessage: (nameMessageBody: string) => {\r\n            dispatch(addNewMessageActionCreator(nameMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n","import React from 'react';\r\nimport {UserType} from '../../redux/users-reducer';\r\nimport classes from '../Users/Users.module.css';\r\nimport src3 from '../../images/avatar3.jpg';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<string>\r\n}\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    return (\r\n        <div className={classes.usersItemContainer}>\r\n            <div>\r\n                {pages.map((page, index) => {\r\n                    return <span\r\n                        key={index}\r\n                        className={props.currentPage === page ? classes.selectedPage : ''}\r\n                        onClick={(e) => {\r\n                            props.onPageChanged(page)\r\n                        }}\r\n                    >{page}</span>\r\n                })}\r\n            </div>\r\n            {props.users.map(u => <div key={u.id} className={classes.usersItem}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + u.id}>\r\n                             <img src={u.photos.small !== null ? u.photos.large : src3} alt={'userImage'}\r\n                                  className={classes.photoItem}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => {\r\n                                          props.unfollow(u.id)\r\n                                      }}>Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(u.id);\r\n                                      }}>Follow</button>\r\n                        }\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/preloader.adbf1264.gif\";","import React from 'react';\r\nimport preloader from '../../../images/preloader.gif';\r\n\r\nconst Preloader: React.FC = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt={'isFetching'}/>\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","import {AppStateType} from './redux-store';\r\nimport {createSelector} from 'reselect';\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUserCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport Users from './Users';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    followSuccess, requestUsers,\r\n    setCurrentPage,\r\n    setUsers,\r\n    setUsersTotalCount, toggleFollowingProgress,\r\n    unfollowSuccess,\r\n    UserType\r\n} from '../../redux/users-reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount, getUsers\r\n} from '../../redux/users-selectors';\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<string>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    onPageChanged={this.onPageChanged}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n// const mapStateToProps = (state: AppStateType) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            follow: followSuccess,\r\n            unfollow: unfollowSuccess,\r\n            setUsers,\r\n            setCurrentPage,\r\n            setUsersTotalCount,\r\n            toggleFollowingProgress,\r\n            getUsers: requestUsers\r\n        })\r\n)(UsersContainer);\r\n\r\n\r\n// const mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n//     return {\r\n//         follow: (userId: string) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         unfollow: (userId: string) => {\r\n//             dispatch(unfollowAC(userId));\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users));\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage));\r\n//         },\r\n//         setUsersTotalCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount));\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//         }\r\n//     }\r\n// }\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileStatusStatePropsType = {\r\n    editMode: boolean,\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {ProfileInfoType} from '../Profile';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport avatar from '../../../images/avatar3.jpg';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*<div className={classes.profileImg}>*/}\r\n                {/*    <img src={profileImg} alt={'profileImg'}/>*/}\r\n                {/*</div>*/}\r\n                <div className={classes.descriptionBlock}>\r\n                    <div className={classes.ProfilePhotos}>\r\n                        <img src={props.profile.photos.small ? props.profile.photos.large : avatar} alt={'photos'}/>\r\n                    </div>\r\n                    <div>\r\n                        {props.profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        {props.profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        {props.profile.contacts.github}\r\n                    </div>\r\n                    <div>\r\n                        <ProfileStatusWithHooks\r\n                            status={props.status}\r\n                            updateUserStatus={props.updateUserStatus}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport avatar from '../../../../images/avatar1.png';\r\n\r\ntype PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div className={classes.post_avatar}>\r\n                <img src={avatar} alt={'avatar'}/>\r\n            </div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>\r\n                    Like: {props.likes}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostType} from '../../../redux/store';\r\nimport {InjectedFormProps, Field, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControl';\r\n\r\nexport type MyPostsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\ntype MyPostsFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts: React.FC<MyPostsType> = (props) => {\r\n    let postsElement = props.posts.map(post =>\r\n        <Post key={post.id}\r\n              id={post.id}\r\n              message={post.message}\r\n              likes={post.likes}/>)\r\n\r\n    const addNewPost = (values: MyPostsFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst MyPostsForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostText'}\r\n                    placeholder={'Post message'}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostsFormRedux = reduxForm<MyPostsFormType>({form: 'postMyPostsForm'})(MyPostsForm)\r\n\r\nexport default MyPosts;\r\n","import MyPosts from './MyPosts';\r\nimport {\r\n    ActionType,\r\n    addPostActionCreator\r\n} from '../../../redux/profile-reducer';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n// const MyPostsContainer: React.FC = (props) => {\r\n//     debugger\r\n//     let addPost = () => {\r\n//         if (props.profilePage.newPostText.trim() !== '') {\r\n//             props.dispatch(addPostActionCreator(props.profilePage.newPostText.trim()));\r\n//             props.profilePage.newPostText = '';\r\n//         } else {\r\n//             alert('Error. Нужно доделать')\r\n//         }\r\n//     }\r\n//\r\n//     let onPostChange = (text: string) => {\r\n//         props.dispatch(updateNewPostTextActionCreator(text));\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <MyPosts\r\n//                 addPost={addPost}\r\n//                 updateNewPostText={onPostChange}\r\n//                 profilePage={props.profilePage}/>\r\n//         </div>\r\n//     );\r\n// }\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../redux/profile-reducer';\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfileInfoType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\ntype ProfileContainerType = {\r\n    profile: ProfileType | null\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    status: string\r\n}\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype PropsType = ProfileContainerType & mapStateToPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css'\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Logout</button></div>\r\n                    :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\ntype HeaderContainerType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    logout\r\n})(HeaderContainer);\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControl';\r\nimport {required} from '../../utils/validators/validators';\r\nimport styles from '../common/FormsControls/FormsControl.module.css';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {login} from '../../redux/auth-reducer';\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    error: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                    validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    type={'password'}\r\n                    validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}/>rememberMe\r\n            </div>\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean | null\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div className={styles.formControlWrapper}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Friend.module.css';\r\n\r\ntype FriendType = {\r\n    id: string\r\n    friendName: string\r\n    avatar: string\r\n}\r\n\r\nconst Friend: React.FC<FriendType> = (props) => {\r\n    let path = '/friendsBlock/' + props.id\r\n    return (\r\n        <div className={classes.itemFriend}>\r\n            <div className={classes.friendAvatar}>\r\n                <NavLink to={path}><img src={props.avatar} alt={'avatar'}/></NavLink>\r\n            </div>\r\n            <div className={classes.nameClass}>\r\n                <NavLink style={{textDecoration: 'none', color: 'blanchedalmond'}} to={path}>{props.friendName}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friend;\r\n","import React from 'react';\r\nimport classes from './Friends.module.css';\r\nimport Friend from './Friend/Friend';\r\nimport {FriendsBlockType} from '../../redux/sidebar-reducer';\r\n\r\ntype FriendsType = {\r\n    friendsBlock: Array<FriendsBlockType>\r\n}\r\n\r\nconst Friends: React.FC<FriendsType> = (props) => {\r\n    let friendsBlock = props.friendsBlock.map(f => <Friend key={f.id} avatar={f.avatar} friendName={f.friendName} id={f.id}/>)\r\n    return (\r\n        <div className={classes.headerFriends}>\r\n            <div className={classes.titleFriends}>\r\n                <span>My friends</span>\r\n            </div>\r\n            <div></div>\r\n            <div className={classes.itemFriends}>{friendsBlock}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport Friends from './Friends';\r\nimport {FriendsBlockType} from '../../redux/sidebar-reducer';\r\n\r\ntype FriendsPropsType = {\r\n    friendsBlock: Array<FriendsBlockType>\r\n}\r\n\r\nclass FriendsContainer extends React.Component<FriendsPropsType> {\r\n    render() {\r\n        return (\r\n            <Friends {...this.props} />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friendsBlock: state.sidebar.friendsBlock\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {})\r\n)(FriendsContainer);\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {Route, withRouter} from 'react-router-dom';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport {AppStateType} from './redux/redux-store';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {initializeApp} from './redux/app-reducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport FriendsContainer from './components/Friends/FriendsContainer';\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype ComponentDidMountPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapStateToPropsType & ComponentDidMountPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className={'app-wrapper'}>\n                <HeaderContainer/>\n                <Navbar/>\n                <FriendsContainer />\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/profile/:userId?\" render={() =>\n                        <ProfileContainer/>}/>\n                    <Route path=\"/dialogs\" render={() =>\n                        <DialogsContainer/>}/>\n                    <Route path=\"/users\" render={() =>\n                        <UsersContainer/>}/>\n                    <Route path=\"/login\" render={() =>\n                        <Login/>}/>\n                    <Route path=\"/news\" component={News}/>\n                    <Route path=\"/music\" component={Music}/>\n                    <Route path=\"/settings\" component={Settings}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/redux-store';\nimport App from './App';\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlWrapper\":\"FormsControl_formControlWrapper__3dn2-\",\"formControl\":\"FormsControl_formControl__3EBbE\",\"error\":\"FormsControl_error__3gpt0\",\"formSummaryError\":\"FormsControl_formSummaryError__1sXsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoItem\":\"Users_photoItem__2_QJb\",\"usersItemContainer\":\"Users_usersItemContainer__2debM\",\"usersItem\":\"Users_usersItem__2YmN3\",\"selectedPage\":\"Users_selectedPage__1PV8A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__32IEi\",\"dialogsItems\":\"Dialogs_dialogsItems__3PoRR\",\"messages\":\"Dialogs_messages__3aKtr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__1R5W4\",\"dialog\":\"DialogItem_dialog__3ChSY\",\"dialogAvatar\":\"DialogItem_dialogAvatar__35j3p\",\"dialogName\":\"DialogItem_dialogName__ucqdT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerFriends\":\"Friends_headerFriends__2bQ4Z\",\"itemFriends\":\"Friends_itemFriends__1hI_K\",\"titleFriends\":\"Friends_titleFriends__2beEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendAvatar\":\"Friend_friendAvatar__3wEbM\",\"nameClass\":\"Friend_nameClass__1mo9p\",\"itemFriend\":\"Friend_itemFriend__1zVTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__g2Egm\",\"itemText\":\"Message_itemText__34RBh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3C0mM\",\"ProfilePhotos\":\"ProfileInfo_ProfilePhotos__2WeJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__2mcAp\",\"posts\":\"MyPosts_posts__1BTGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1mEk_\",\"post_avatar\":\"Post_post_avatar__1tIXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1BxDK\",\"login\":\"Header_login__VuZqN\"};"],"sourceRoot":""}