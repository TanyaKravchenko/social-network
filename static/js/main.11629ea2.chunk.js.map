{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","api/api.ts","redux/profile-reducer.ts","images/avatar3.jpg","images/avatar5.jpg","images/avatar4.jpeg","images/avatar1.png","images/avatar2.jpg","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","images/news.jpg","components/News/News.tsx","images/music.png","components/Music/Music.tsx","images/settings.png","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControl.tsx","utils/validators/validators.ts","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","images/preloader.gif","components/common/Preloader/Preloader.tsx","redux/users-selectors.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Friends/Friend/Friend.tsx","components/Friends/Friends.tsx","components/Friends/FriendsContainer.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControl.module.css","components/Users/Users.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Friends/Friends.module.css","components/Friends/Friend/Friend.module.css","components/Dialogs/Message/Message.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","headers","baseURL","usersAPI","currentPage","pageSize","get","response","data","profileAPI","userId","status","put","authAPI","email","password","rememberMe","post","delete","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","initialState","posts","id","v1","message","likes","newPostText","profile","setStatus","type","profileReducer","state","action","newPost","filter","p","postId","ADD_NEW_MESSAGE_TEXT","dialogs","name","avatar","src1","src2","src3","src4","src5","messages","dialogsReducer","newMessage","nameMessageBody","ADD_FRIENDS","friendsBlock","friendName","sidebarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","totalCount","toggleIsFetching","IsFetching","toggleFollowingProgress","usersReducer","map","u","followed","SET_USER_DATA","login","isAuth","setAuthUserData","payload","getAuthUserData","dispatch","resultCode","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","classes","nav","item","to","activeClassName","active","News","src","news_image","alt","Music","music_image","Settings","settings_image","DialogItem","props","path","dialogItem","dialogAvatar","dialogName","Message","itemText","FormControl","meta","touched","error","children","showError","styles","formControl","Textarea","input","restProps","Input","required","value","maxLengthCreator","maxLength","length","maxLength50","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","values","addNewMessage","mapStateToPropsForRedirect","compose","connect","addNewMessageActionCreator","Component","Users","pagesCount","Math","ceil","pages","i","push","usersItemContainer","page","index","selectedPage","onClick","e","onPageChanged","usersItem","photos","small","large","photoItem","disabled","some","unfollow","follow","Preloader","preloader","getUsers","createSelector","getPageSize","getTotalUserCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","this","React","items","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatus","onChange","currentTarget","ProfileInfo","descriptionBlock","ProfilePhotos","fullName","aboutMe","contacts","github","Post","post_avatar","maxLength10","MyPosts","memo","postsElement","postBlock","MyPostsFormRedux","addPost","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","authorizedUserId","history","getUserProfile","getUserStatus","withRouter","Header","header","logout","HeaderContainer","LoginReduxForm","formSummaryError","stopSubmit","_error","formControlWrapper","formData","Friend","itemFriend","friendAvatar","nameClass","style","textDecoration","color","Friends","f","headerFriends","titleFriends","itemFriends","FriendsContainer","App","initializeApp","render","DialogsContainer","promise","Promise","all","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.11629ea2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"News_item__g-_6y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Music_item__3oVaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Settings_item__3vgb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2fnbk\",\"item\":\"Navbar_item__3TpPD\",\"active\":\"Navbar_active__ugoIQ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\nconst baseURL = 'https://social-network.samuraijs.com/api/1.0/';\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '22d983b1-894f-49cd-9ef9-5c17b8e4c8a6'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n// type loginPostType = {\r\n//     resultCode: 0 | 1 | 100\r\n//     messages: Array<string>\r\n//         data: {\r\n//         userId: 2\r\n//     }\r\n// }\r\n//\r\n// type StopSubmitType = {\r\n//     stopSubmit: (form: string, errors?: any) => void\r\n// }\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(baseURL + `users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response) => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(id: string) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    unfollow(id: string) {\r\n        return instance.delete(`unfollow/${id}`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status: status})\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n","import {v1} from 'uuid'\r\nimport {Dispatch} from 'redux';\r\nimport {profileAPI} from '../api/api';\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\n\r\ntype PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\ntype ContactType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: string\r\n    photos: PhotosType\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof addPostActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof deletePost>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: v1(), message: 'HiHello', likes: 5},\r\n        {id: v1(), message: 'YoHello', likes: 15}\r\n    ],\r\n    newPostText: '',\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                message: action.newPostText,\r\n                likes: 0\r\n            }\r\n            // if (action.newPostText.trim() !== '') {\r\n            // } else {\r\n            //     alert('Error. Нужно доделать')\r\n            // }\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [...state.posts, newPost]\r\n            };\r\n                case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType | null) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }as const\r\n}\r\n\r\nexport const deletePost = (postId: string) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    }as const\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    profileAPI.getProfile(userId)\r\n        .then((response) => {\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n}\r\n\r\nexport const getUserStatus = (userId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    profileAPI.getStatus(userId)\r\n        .then((response) => {\r\n            dispatch(setStatus(response.data))\r\n        })\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => (dispatch: Dispatch<ActionType>) => {\r\n    profileAPI.updateStatus(status)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0)\r\n            dispatch(setStatus(status))\r\n        })\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n","export default __webpack_public_path__ + \"static/media/avatar3.98fcfaf1.jpg\";","export default __webpack_public_path__ + \"static/media/avatar5.4f1f971b.jpg\";","export default __webpack_public_path__ + \"static/media/avatar4.b85489ca.jpeg\";","export default __webpack_public_path__ + \"static/media/avatar1.1b29529b.png\";","export default __webpack_public_path__ + \"static/media/avatar2.273adcab.jpg\";","import {v1} from 'uuid';\r\nimport src1 from '../images/avatar3.jpg';\r\nimport src2 from '../images/avatar5.jpg';\r\nimport src3 from '../images/avatar4.jpeg';\r\nimport src4 from '../images/avatar1.png';\r\nimport src5 from '../images/avatar2.jpg';\r\n\r\nexport const ADD_NEW_MESSAGE_TEXT = 'ADD-NEW-MESSAGE-TEXT'\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof addNewMessageActionCreator>\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Dimych', avatar: src1},\r\n        {id: v1(), name: 'Sveta', avatar: src2},\r\n        {id: v1(), name: 'Valera', avatar: src3},\r\n        {id: v1(), name: 'Ignat', avatar: src4},\r\n        {id: v1(), name: 'Victor', avatar: src5},\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: 'Hi'},\r\n        {id: v1(), message: 'Yo'},\r\n        {id: v1(), message: 'Hello!'},\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_MESSAGE_TEXT:\r\n            let newMessage: MessageType = {\r\n                id: v1(),\r\n                message: action.nameMessageBody,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addNewMessageActionCreator = (nameMessageBody: string) => {\r\n    return {\r\n        type: ADD_NEW_MESSAGE_TEXT,\r\n        nameMessageBody\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import {v1} from 'uuid';\r\nimport src1 from '../images/avatar3.jpg';\r\nimport src2 from '../images/avatar5.jpg';\r\nimport src3 from '../images/avatar4.jpeg';\r\n\r\nexport type FriendsBlockType = {\r\n    id: string\r\n    friendName: string\r\n    avatar: string\r\n}\r\n\r\nconst ADD_FRIENDS = 'ADD_FRIENDS'\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ActionType = ReturnType<typeof addFriends>\r\n\r\nlet initialState = {\r\n    friendsBlock: [\r\n        {id: v1(), friendName: 'Kostya', avatar: src1},\r\n        {id: v1(), friendName: 'Masha', avatar: src2},\r\n        {id: v1(), friendName: 'Misha', avatar: src3}\r\n    ]\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_FRIENDS:\r\n            return {\r\n                ...state,\r\n                friendsBlock: action.friendsBlock\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addFriends = (friendsBlock: Array<FriendsBlockType>) => ({\r\n    type: ADD_FRIENDS,\r\n    friendsBlock\r\n} as const)\r\n\r\nexport default sidebarReducer;\r\n\r\n","import {usersAPI} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\ntype PhotoType = {\r\n    small: any\r\n    large: any\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    photos: PhotoType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nexport type UsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<string>\r\n}\r\n\r\nexport type ActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setUsersTotalCount> |\r\n    ReturnType<typeof toggleIsFetching> |\r\n    ReturnType<typeof toggleFollowingProgress>\r\n\r\nlet initialState: UsersType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n            case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.IsFetching\r\n            };\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.IsFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: string) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: string) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setUsersTotalCount = (totalCount: number) => ({type: SET_USERS_TOTAL_COUNT, totalCount} as const)\r\nexport const toggleIsFetching = (IsFetching: boolean) => ({type: TOGGLE_IS_FETCHING, IsFetching} as const)\r\nexport const toggleFollowingProgress = (IsFetching: boolean, userId: string) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, IsFetching, userId} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then((data) => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setUsersTotalCount(data.totalCount))\r\n            });\r\n    }\r\n}\r\n\r\nexport const follow = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.follow(userId)\r\n            .then((response) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId)\r\n            .then((response) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId));\r\n            })\r\n    }\r\n}\r\nexport default usersReducer;\r\n\r\n","import {authAPI} from '../api/api';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AppStateType} from './redux-store';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\n\r\nexport const SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\n\r\n// type DataType = {\r\n//     userId: string | null\r\n//     email: string | null\r\n//     login: string | null\r\n//     isAuth: boolean\r\n// }\r\n\r\nexport type ActionType = ReturnType<typeof setAuthUserData> | FormAction\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setAuthUserData = (id: string | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => (dispatch: DispatchType) => {\r\n    return authAPI.me()\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n        })\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => (dispatch: DispatchType) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData());\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\r\n                dispatch(stopSubmit('login', {_error: message}));\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = (): ThunkType => (dispatch: DispatchType) => {\r\n    authAPI.logout()\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;","import {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AppStateType} from './redux-store';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\n\r\nexport const INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nexport type ActionType = ReturnType<typeof initializedSuccess> | FormAction\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch: DispatchType) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './app-reducer';\r\n\r\nexport type RootStateType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootStateType>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.active}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","export default __webpack_public_path__ + \"static/media/news.6d9ef3aa.jpg\";","import React from 'react';\r\nimport classes from './News.module.css'\r\nimport news_image from '../../images/news.jpg';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={news_image} alt={'news_image'}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","export default __webpack_public_path__ + \"static/media/music.0e999249.png\";","import React from 'react';\r\nimport classes from './Music.module.css'\r\nimport music_image from '../../images/music.png';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={music_image} alt={'music_image'}/>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","export default __webpack_public_path__ + \"static/media/settings.f6a8201c.png\";","import React from 'react';\r\nimport classes from './Settings.module.css'\r\nimport settings_image from '../../images/settings.png';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div>\r\n                Settings\r\n            </div>\r\n            <img src={settings_image} alt={'settings_image'}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport classes from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string\r\n    avatar: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={classes.dialogItem}>\r\n            <div className={classes.dialogAvatar}>\r\n                <NavLink to={path}><img src={props.avatar} alt={'avatar'}/></NavLink>\r\n            </div>\r\n            <div className={classes.dialogName}>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './Message.module.css'\r\n\r\ntype MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={classes.itemText}>\r\n            <div className={classes.message}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormsControl.module.css'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const showError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (showError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {showError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}> <textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value: FieldValidatorType) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControl';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\nexport type AddMessageFormType = {\r\n    nameMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'nameMessageBody'}\r\n                    placeholder={'Enter your message'}\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {InitialStateType} from '../../redux/dialogs-reducer';\r\nimport {AddMessageFormRedux, AddMessageFormType} from './AddMessageForm/AddMessageForm';\r\n\r\ntype DialogsType = {\r\n    onMessageChange: (textMessage: string) => void\r\n    addNewMessage: (nameMessageBody: string) => void\r\n    dialogsPage: InitialStateType;\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsType> = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => (\r\n        <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>\r\n    ));\r\n    let messagesElements = props.dialogsPage.messages.map((m) => (\r\n        <Message key={m.id} id={m.id} message={m.message}/>\r\n    ));\r\n\r\n    let addNewMessage = (values: AddMessageFormType) => {\r\n        props.addNewMessage(values.nameMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n            <div className={classes.messages}>{messagesElements}</div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth)\r\n            return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import {\r\n    ActionType,\r\n    addNewMessageActionCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport React from 'react';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n    return {\r\n        addNewMessage: (nameMessageBody: string) => {\r\n            dispatch(addNewMessageActionCreator(nameMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n","import React from 'react';\r\nimport {UserType} from '../../redux/users-reducer';\r\nimport classes from '../Users/Users.module.css';\r\nimport src3 from '../../images/avatar3.jpg';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<string>\r\n}\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    return (\r\n        <div className={classes.usersItemContainer}>\r\n            <div>\r\n                {pages.map((page, index) => {\r\n                    return <span\r\n                        key={index}\r\n                        className={props.currentPage === page ? classes.selectedPage : ''}\r\n                        onClick={(e) => {\r\n                            props.onPageChanged(page)\r\n                        }}\r\n                    >{page}</span>\r\n                })}\r\n            </div>\r\n            {props.users.map(u => <div key={u.id} className={classes.usersItem}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + u.id}>\r\n                             <img src={u.photos.small !== null ? u.photos.large : src3} alt={'userImage'}\r\n                                  className={classes.photoItem}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => {\r\n                                          props.unfollow(u.id)\r\n                                      }}>Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(u.id);\r\n                                      }}>Follow</button>\r\n                        }\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/preloader.adbf1264.gif\";","import React from 'react';\r\nimport preloader from '../../../images/preloader.gif';\r\n\r\nconst Preloader: React.FC = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt={'isFetching'}/>\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","import {AppStateType} from './redux-store';\r\nimport {createSelector} from 'reselect';\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUserCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport Users from './Users';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    followSuccess, requestUsers,\r\n    setCurrentPage,\r\n    setUsers,\r\n    setUsersTotalCount, toggleFollowingProgress,\r\n    unfollowSuccess,\r\n    UserType\r\n} from '../../redux/users-reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount, getUsers\r\n} from '../../redux/users-selectors';\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<string>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    onPageChanged={this.onPageChanged}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n// const mapStateToProps = (state: AppStateType) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            follow: followSuccess,\r\n            unfollow: unfollowSuccess,\r\n            setUsers,\r\n            setCurrentPage,\r\n            setUsersTotalCount,\r\n            toggleFollowingProgress,\r\n            getUsers: requestUsers\r\n        })\r\n)(UsersContainer);\r\n\r\n\r\n// const mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n//     return {\r\n//         follow: (userId: string) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         unfollow: (userId: string) => {\r\n//             dispatch(unfollowAC(userId));\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users));\r\n//         },\r\n//         setCurrentPage: (currentPage: number) => {\r\n//             dispatch(setCurrentPageAC(currentPage));\r\n//         },\r\n//         setUsersTotalCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount));\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching));\r\n//         }\r\n//     }\r\n// }\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileStatusStatePropsType = {\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksType & ProfileStatusStatePropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {ProfileInfoType} from '../Profile';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport avatar from '../../../images/avatar3.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={classes.descriptionBlock}>\r\n                    <div className={classes.ProfilePhotos}>\r\n                        <img src={props.profile.photos.small ? props.profile.photos.large : avatar} alt={'photos'}/>\r\n                    </div>\r\n                    <div>\r\n                        {props.profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        {props.profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        {props.profile.contacts.github}\r\n                    </div>\r\n                    <div>\r\n                        <ProfileStatusWithHooks\r\n                            status={props.status}\r\n                            updateUserStatus={props.updateUserStatus}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport avatar from '../../../../images/avatar1.png';\r\n\r\ntype PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div className={classes.post_avatar}>\r\n                <img src={avatar} alt={'avatar'}/>\r\n            </div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>\r\n                    Like: {props.likes}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostType} from '../../../redux/store';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControl';\r\n\r\nexport type MyPostsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\ntype MyPostsFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    let postsElement = props.posts.map(post =>\r\n        <Post key={post.id}\r\n              id={post.id}\r\n              message={post.message}\r\n              likes={post.likes}/>)\r\n\r\n    const addNewPost = (values: MyPostsFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostsFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst MyPostsForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostText'}\r\n                    placeholder={'Post message'}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostsFormRedux = reduxForm<MyPostsFormType>({form: 'postMyPostsForm'})(MyPostsForm)\r\n\r\nexport default MyPosts;\r\n","import MyPosts from './MyPosts';\r\nimport {\r\n    ActionType,\r\n    addPostActionCreator\r\n} from '../../../redux/profile-reducer';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n// const MyPostsContainer: React.FC = (props) => {\r\n//     debugger\r\n//     let addPost = () => {\r\n//         if (props.profilePage.newPostText.trim() !== '') {\r\n//             props.dispatch(addPostActionCreator(props.profilePage.newPostText.trim()));\r\n//             props.profilePage.newPostText = '';\r\n//         } else {\r\n//             alert('Error. Нужно доделать')\r\n//         }\r\n//     }\r\n//\r\n//     let onPostChange = (text: string) => {\r\n//         props.dispatch(updateNewPostTextActionCreator(text));\r\n//     }\r\n//\r\n//     return (\r\n//         <div>\r\n//             <MyPosts\r\n//                 addPost={addPost}\r\n//                 updateNewPostText={onPostChange}\r\n//                 profilePage={props.profilePage}/>\r\n//         </div>\r\n//     );\r\n// }\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../redux/profile-reducer';\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfileInfoType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\ntype ProfileContainerType = {\r\n    profile: ProfileType | null\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    status: string\r\n}\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype PropsType = ProfileContainerType & mapStateToPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css'\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Logout</button></div>\r\n                    :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\ntype HeaderContainerType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    logout\r\n})(HeaderContainer);\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControl';\r\nimport {required} from '../../utils/validators/validators';\r\nimport styles from '../common/FormsControls/FormsControl.module.css';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {login} from '../../redux/auth-reducer';\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    error: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                    validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    type={'password'}\r\n                    validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}/>rememberMe\r\n            </div>\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean | null\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div className={styles.formControlWrapper}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Friend.module.css';\r\n\r\ntype FriendType = {\r\n    id: string\r\n    friendName: string\r\n    avatar: string\r\n}\r\n\r\nconst Friend: React.FC<FriendType> = (props) => {\r\n    let path = '/friendsBlock/' + props.id\r\n    return (\r\n        <div className={classes.itemFriend}>\r\n            <div className={classes.friendAvatar}>\r\n                <NavLink to={path}><img src={props.avatar} alt={'avatar'}/></NavLink>\r\n            </div>\r\n            <div className={classes.nameClass}>\r\n                <NavLink style={{textDecoration: 'none', color: 'blanchedalmond'}} to={path}>{props.friendName}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friend;\r\n","import React from 'react';\r\nimport classes from './Friends.module.css';\r\nimport Friend from './Friend/Friend';\r\nimport {FriendsBlockType} from '../../redux/sidebar-reducer';\r\n\r\ntype FriendsType = {\r\n    friendsBlock: Array<FriendsBlockType>\r\n}\r\n\r\nconst Friends: React.FC<FriendsType> = (props) => {\r\n    let friendsBlock = props.friendsBlock.map(f => <Friend key={f.id} avatar={f.avatar} friendName={f.friendName} id={f.id}/>)\r\n    return (\r\n        <div className={classes.headerFriends}>\r\n            <div className={classes.titleFriends}>\r\n                <span>My friends</span>\r\n            </div>\r\n            <div></div>\r\n            <div className={classes.itemFriends}>{friendsBlock}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport Friends from './Friends';\r\nimport {FriendsBlockType} from '../../redux/sidebar-reducer';\r\n\r\ntype FriendsPropsType = {\r\n    friendsBlock: Array<FriendsBlockType>\r\n}\r\n\r\nclass FriendsContainer extends React.Component<FriendsPropsType> {\r\n    render() {\r\n        return (\r\n            <Friends {...this.props} />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friendsBlock: state.sidebar.friendsBlock\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {})\r\n)(FriendsContainer);\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {Route, withRouter} from 'react-router-dom';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport {AppStateType} from './redux/redux-store';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {initializeApp} from './redux/app-reducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport FriendsContainer from './components/Friends/FriendsContainer';\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype ComponentDidMountPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapStateToPropsType & ComponentDidMountPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className={'app-wrapper'}>\n                <HeaderContainer/>\n                <Navbar/>\n                <FriendsContainer />\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/profile/:userId?\" render={() =>\n                        <ProfileContainer/>}/>\n                    <Route path=\"/dialogs\" render={() =>\n                        <DialogsContainer/>}/>\n                    <Route path=\"/users\" render={() =>\n                        <UsersContainer/>}/>\n                    <Route path=\"/login\" render={() =>\n                        <Login/>}/>\n                    <Route path=\"/news\" component={News}/>\n                    <Route path=\"/music\" component={Music}/>\n                    <Route path=\"/settings\" component={Settings}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/redux-store';\nimport App from './App';\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlWrapper\":\"FormsControl_formControlWrapper__3dn2-\",\"formControl\":\"FormsControl_formControl__3EBbE\",\"error\":\"FormsControl_error__3gpt0\",\"formSummaryError\":\"FormsControl_formSummaryError__1sXsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoItem\":\"Users_photoItem__2_QJb\",\"usersItemContainer\":\"Users_usersItemContainer__2debM\",\"usersItem\":\"Users_usersItem__2YmN3\",\"selectedPage\":\"Users_selectedPage__1PV8A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__32IEi\",\"dialogsItems\":\"Dialogs_dialogsItems__3PoRR\",\"messages\":\"Dialogs_messages__3aKtr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__1R5W4\",\"dialog\":\"DialogItem_dialog__3ChSY\",\"dialogAvatar\":\"DialogItem_dialogAvatar__35j3p\",\"dialogName\":\"DialogItem_dialogName__ucqdT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerFriends\":\"Friends_headerFriends__2bQ4Z\",\"itemFriends\":\"Friends_itemFriends__1hI_K\",\"titleFriends\":\"Friends_titleFriends__2beEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendAvatar\":\"Friend_friendAvatar__3wEbM\",\"nameClass\":\"Friend_nameClass__1mo9p\",\"itemFriend\":\"Friend_itemFriend__1zVTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__g2Egm\",\"itemText\":\"Message_itemText__34RBh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3C0mM\",\"ProfilePhotos\":\"ProfileInfo_ProfilePhotos__2WeJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__2mcAp\",\"posts\":\"MyPosts_posts__1BTGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1mEk_\",\"post_avatar\":\"Post_post_avatar__1tIXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1BxDK\",\"login\":\"Header_login__VuZqN\"};"],"sourceRoot":""}